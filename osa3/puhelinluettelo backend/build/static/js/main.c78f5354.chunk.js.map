{"version":3,"sources":["personForm.js","person.js","filter.js","services/personsServiceCommunication.js","App.js","index.js"],"names":["PersonForm","props","onSubmit","handleHyvaksyminen","type","name","value","onChange","handlePersonChange","number","handleNumberChange","Person","filteri","map","p","onClick","deletePerson","id","Filter","e","setSearch","target","baseUrl","axios","get","then","response","data","catch","error","console","log","newObject","post","put","delete","App","useState","persons","setPersons","setNewName","setNewNumber","search","notificationMessage","setNotificationMessage","errorMessage","setErrorMessage","event","useEffect","PersonsServiceCommunication","initialPersons","filter","people","toLowerCase","includes","Notification","message","className","Error","errormes","addPerson","preventDefault","returnedPersons","concat","setTimeout","newPerson","tuplat","length","alert","window","confirm","oldPerson","find","updatedPerson","returnedPerson","person","handleUpdate","deletedPerson","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c78f5354.chunk.js","sourcesContent":["import React from 'react';\r\n// props.addPerson\r\n\r\nconst PersonForm = (props) => ( \r\n<form onSubmit={props.handleHyvaksyminen}> \r\n\r\n        <div>\r\n          name:  \r\n          <input\r\n          type =\"text\"\r\n          name=\"name\" \r\n          value={props.name} // täällä asetetaan arvot inputista APP:ille\r\n          onChange={props.handlePersonChange} \r\n          />\r\n        </div>\r\n        <div>\r\n          number:  \r\n          <input\r\n          type =\"text\"\r\n          name=\"number\"\r\n          value={props.number}\r\n          onChange={props.handleNumberChange} />\r\n\r\n        </div>\r\n  \r\n  \r\n        <div>\r\n          <button \r\n          type=\"submit\"\r\n          >add</button>\r\n        \r\n        </div>  \r\n    \r\n      </form>\r\n    \r\n  )\r\n\r\nexport default PersonForm","// TÄHÄN KEKSIÄ MITEN SAIS SeN MAPIN JÄRKEVÄSTI TÄNNE\r\nimport React from 'react';\r\n\r\nconst Person = (props) => (\r\n\r\n   <ul>\r\n    {props.filteri.map(p => {\r\n          return (\r\n            \r\n            <div key={p.name}>\r\n              <p> {p.name} {p.number}\r\n              <button \r\n              onClick={()=>props.deletePerson(p.id)}>poista</button>\r\n\r\n              </p>\r\n              \r\n              </div>\r\n              \r\n              );\r\n            })}\r\n            </ul>\r\n\r\n        \r\n  )\r\n\r\n  export default Person","// TÄHÄN KEKSIÄ MITEN SAIS SeN MAPIN JÄRKEVÄSTI TÄNNE\r\nimport React from 'react';\r\n\r\nconst Filter = (props) => (\r\n\r\n    <div>\r\n\r\n      <input\r\n        type=\"text\"\r\n        onChange={e => props.setSearch(e.target.value)}\r\n      />\r\n\r\n    </div>\r\n        \r\n  )\r\n\r\n  export default Filter","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request\r\n  .then(response => response.data)\r\n  .catch(error => {\r\n    console.log('fail')\r\n  })\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\nconst delPers = (id) => {\r\n  return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nexport default { \r\n  getAll: getAll, \r\n  create: create, \r\n  update: update,\r\n  delPers: delPers,\r\n}","import React, { useState, useEffect } from 'react'\nimport PersonForm from './personForm'\nimport Person from './person'\nimport Filter from './filter'\nimport PersonsServiceCommunication from './services/personsServiceCommunication'\nimport './index.css'\n\nconst App = () => {\n  const [persons, setPersons] = useState([]) \n  const [name, setNewName] = useState('')\n  const [number, setNewNumber] = useState('')\n  const [search, setSearch] = useState('')\n  const [notificationMessage, setNotificationMessage] = useState(null) // null, jotta ei näy aluksi\n  const [errorMessage, setErrorMessage] = useState(null) // null, jotta ei näy aluksi\n\n  const handlePersonChange = (event) => {\n    setNewName(event.target.value)\n  }\n  const handleNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  useEffect(() => {\n    PersonsServiceCommunication\n      .getAll()\n        .then(initialPersons => {\n        setPersons(initialPersons)}\n        )}, [])\n\n      const addPerson = (event) => {\n      event.preventDefault()\n      const personObject = {\n        name: name,\n        number: number,\n  };\n  \n      PersonsServiceCommunication\n        .create(personObject)\n        .then(returnedPersons => {\n          setPersons(persons.concat(returnedPersons))\n          setNewName('')\n          setNewNumber('')\n        })\n        setNotificationMessage(\n          `Added ${name}`\n        )\n        setTimeout(() => {\n          setNotificationMessage(null)\n        }, 5000)\n        \n        \n    }\n\n  const handleUpdate = (name) => {\n    const oldPerson = persons.find(p => p.name === name) // Etsii sen saman nimen\n    const updatedPerson = {...oldPerson, number}\n\n    PersonsServiceCommunication\n      .update(updatedPerson.id, updatedPerson) //console.log(persons);\n      .then(returnedPerson => {\n        setPersons(\n          persons.map(\n            person =>\n              person.id !== oldPerson.id ? person: returnedPerson\n            )\n          )\n      setNotificationMessage(\n            `Updated ${name}`\n          )\n          \n        setTimeout(() => {\n          setNotificationMessage(null)\n        }, 5000)\n          \n        })\n       .catch(error => {\n      setErrorMessage(\n          `Information of '${name}' had already been removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n    })\n}\n    \n\n   const handleHyvaksyminen = (event) => {\n      const newPerson = { name, number }\n      const tuplat =\n      persons.filter((p) => p.name === newPerson.name)\n      event.preventDefault()\n\n    if (tuplat.length > 0) {\n      alert (`${name} on jo lisätty`)\n      const acceptnumber = window.confirm(\n        `${name} is already added to phonebook, replace the old number with a new one?`)\n      \n        // Hyväksyminen\n        if (acceptnumber) {    \n        handleUpdate(name)\n      }\n   }\n    else if (tuplat.length === 0) {\n      PersonsServiceCommunication\n        .create(newPerson)\n        .then((returnedPerson) => {\n          setPersons(persons.concat(returnedPerson))\n          setNewName('')\n          setNewNumber('')\n          setNotificationMessage(\n            `Added ${name}`\n            )\n            setTimeout(() => {\n              setNotificationMessage(null)\n            }, 5000)\n          \n        })\n    }\n  }\n      \n      \n      const deletePerson = deletedPerson => {\n        const accept = window.confirm(`Do you want to delete this person ?`)\n        if (accept) {\n        PersonsServiceCommunication\n        .delPers(deletedPerson)\n        \n          setNotificationMessage(\n            `Person removal successful`\n          )\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 5000)\n        \n        }\n        else {\n\n        }\n      }\n    \n\n      const filteri = persons.filter(people => {\n        return people.name.toLowerCase().includes(search.toLowerCase())\n          })\n\n\n      // Määrittely vihreälle ilmoitukselle\n\n      const Notification = ({ message }) => {\n            if (message === null) {\n              return null\n            }\n          \n            return (\n              <div className=\"notification\">\n                {message}\n              </div>\n            )\n          }\n\n        // Määrittely Errorille\n\n      const Error = ({ errormes }) => {\n            if (errormes === null) {\n              return null\n            }\n          \n            return (\n              <div className=\"error\">\n                {errormes}\n              </div>\n            )\n          }\n\n\n\nreturn (\n    <div>\n      <h2>Phonebook</h2> \n\n        <Notification message={notificationMessage} />\n        <Error errormes={errorMessage} />\n\n        <Filter setSearch={setSearch} />\n\n      <h2>add a new</h2>\n        <PersonForm\n          addPerson={addPerson}\n          handlePersonChange={handlePersonChange}\n          handleNumberChange={handleNumberChange}\n          handleHyvaksyminen={handleHyvaksyminen}\n          name={name}\n          number={number}\n        />\n      \n\n      <h2>Numbers</h2>\n        <Person\n          handlePersonChange={handlePersonChange}\n          filteri={filteri}\n          deletePerson={deletePerson}\n          \n          />\n      <div>                                   \n        </div>  \n    \n  </div>\n  );\n\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}